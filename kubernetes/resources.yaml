---
apiVersion: v1
kind: ConfigMap
data:
  default.conf: |-
    server {
        listen 80;
        location = / {
            proxy_pass   http://sandbox:5085;
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: sandbox
spec:
  ports:
  - name: flask
    port: 80
    protocol: TCP
    targetPort: 5085
  selector:
    app: sandbox
    env: dashboard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: sandbox
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sandbox
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: region
                operator: In
                values:
                - spai
              - key: environment
                operator: In
                values:
                - stg
      containers:
      - image: nginx:stable
        imagePullPolicy: IfNotPresent
        name: nginx
        resources:
          limits:
            cpu: 150m
            memory: 64Mi
          requests:
            cpu: 50m
            memory: 32Mi
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/default.conf
          name: vol-conf
          readOnly: true
          subPath: default.conf
      volumes:
      - configMap:
          defaultMode: 420
          name: default.conf
          optional: false
        name: vol-conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sandbox
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: sandbox
      env: dashboard
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sandbox
        env: dashboard
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: region
                operator: In
                values:
                - spai
              - key: environment
                operator: In
                values:
                - stg
      containers:
      - env:
        - name: DEBUG
          value: "false"
        image: mptrabalho/sandbox-dashboard:base
        imagePullPolicy: Always
        name: flask
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
